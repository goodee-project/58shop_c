<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goodee.gdj58.shop_c.mapper.GoodsMapper">
	
	
	<!-- 개별 상품정보 출력 -->
	<select id="selectGoodsOne"
			parameterType="int"
			resultType="java.util.Map">
		SELECT g.goods_no goodsNo
			, g.goods_name goodsName
			, g.goods_price goodsPrice
			, g.type_no typeNo
			, g.company_id companyId
			, c.company_name companyName
			, c.company_registration_number companyRegistratinNumber
			, c.company_ceo companyCeo
			, c.company_phone companyPhone
			, c.company_email companyEmail
			, c.company_address companyAddress
			, img.goods_img_origin_name goodsImgOriginName
			, img.goods_img_level goodsImgLevel		
		FROM shopping_goods g
		INNER JOIN shopping_company c
		ON g.company_id=c.company_id
		INNER JOIN shopping_goods_img img
		ON g.goods_no=img.goods_no
		WHERE g.goods_no=#{goodsNo}
	</select>
	
	<!-- 상품옵션 출력 -->
	<select id="selectGoodsOption"
			parameterType="int"
			resultType="java.util.Map">
		SELECT goods_option_no goodsOptionNo
			, goods_option_content goodsOptionContent
			, goods_option_quantity goodsOptionQuantity
		FROM shopping_goods_option
		WHERE goods_no=#{goodsNo}
	</select>
	
	<!-- 카테고리 이름 출력 -->
	<select id="selectGoodsCategoryName"
			parameterType="int"
			resultType="java.util.Map">
		WITH recursive t AS 
		(
			SELECT type_no
				, parent_no
				, type_content
				, type_content typeName
				, depth
			FROM shopping_type
			WHERE parent_no=0
			UNION ALL 
			SELECT t1.type_no
				, t1.parent_no
				, t1.type_content
				, CONCAT(t.typeName, '>', t1.type_content) menu
				, t1.depth
			FROM shopping_type t1
			INNER JOIN t
			ON t1.parent_no=t.type_no
		)
		SELECT typeName, type_content typeContent,
		(
			SELECT type_content
			FROM shopping_type t2
			WHERE t2.type_no=t.parent_no AND t.depth > 0
		) parent
		FROM t
		WHERE t.type_no=#{typeNo}
	</select>
	
	<!-- 카테고리별 상품 출력 -->
	<select id="selectGoodsCategory"
			parameterType="java.util.Map"
			resultType="java.util.Map">
		WITH recursive t3 AS
		( 
			SELECT t1.type_no, t1.type_content, t1.parent_no, t1.group_no, t1.depth
			FROM shopping_type t1
			WHERE t1.type_no=#{typeNo}
			UNION ALL
			SELECT t2.type_no, t2.type_content, t2.parent_no, t2.group_no, t2.depth
			FROM shopping_type t2
			INNER JOIN t3 ON t2.parent_no=t3.type_no
		)
		SELECT t3.type_no typeNo
			, t3.type_content typeContent
			, t3.group_no groupNo
			, t3.parent_no parentNo
			, t3.depth depth
			, g.goods_no goodsNo
			, g.company_id companyId
			, g.goods_name goodsName
			, g.goods_price goodsPrice
			, g.goods_level goodsLevel
			, g.goods_active goodsActive
			, g.updatedate updatedate
			, g.createdate createdate
			, c.company_name companyName
			, img.goods_img_origin_name goodsImgOriginName
			, img.goods_img_level goodsImgLevel
		FROM t3
		INNER JOIN shopping_goods g
		ON t3.type_no=g.type_no
		INNER JOIN shopping_goods_img img
		ON g.goods_no=img.goods_no
		INNER JOIN shopping_company c
		ON g.company_id=c.company_id
		<where>
			<if test='searchword != null || searchword !=""'>
				g.goods_name LIKE CONCAT('%',#{searchword},'%')
			</if>
		</where>
		<choose>
			<when test='keyword.equals("new")'>
				ORDER BY g.createdate DESC
			</when>
			<when test='keyword.equals("low")'>
				ORDER BY g.goods_price ASC
			</when>
			<when test='keyword.equals("high")'>
				ORDER BY g.goods_price DESC
			</when>
		</choose>
	</select>

</mapper>