<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goodee.gdj58.shop_c.mapper.GoodsOrderMapper">



	<!-- ================= 주문 폼 시작 ================= -->
	
	<!-- 주문자 정보(주문자 이름, 이메일, 연락처) -->
	<select id = "ofSelectCustomer"
			parameterType = "java.lang.String"
			resultType = "java.util.HashMap">
	
		SELECT
		 	c.customer_name customerName
		 	, c.customer_phone customerPhone
		 	, c.customer_email customerEmail
		 	, c.customer_pay customerPay
		 	, c.customer_point customerPoint
		 	, r.reward
		FROM customer c
			INNER JOIN rank r
			ON c.customer_rank = r.customer_rank
		WHERE customer_id = #{customerId}	
	
	</select>
	
	<!-- 상품 한 종류 주문 상품 정보 -->
	<!-- 이미지, 상품명, 회사명, 가격, 옵션 내용 -->
	<!-- 여러 주문일 때는 반복문 돌릴 예정 -->
	<select id = "ofSelectGoodsOrderInfoOne"
			parameterType = "int"
			resultType = "java.util.HashMap">
			
		SELECT
			gi.goods_img_save_name goodsImgSaveName
			, g.goods_name goodsName
			, c.company_name companyName
			, g.goods_price goodsPrice
			, go.goods_option_content goodsOptionContent
		FROM shopping_goods_option go
		INNER JOIN shopping_goods g
			ON go.goods_no = g.goods_no
		INNER JOIN shopping_goods_img gi
			ON g.goods_no = gi.goods_no
		INNER JOIN shopping_company c
			ON g.company_id = c.company_id
		WHERE go.goods_option_no = #{goodsOptionNo}		
			
	</select>
	
	<!-- 장바구니에서 option_no, 수량 가져오기 -->
	<select id = "ofSelectCart"
			parameterType = "java.lang.String"
			resultType = "goodee.gdj58.shop_c.vo.Cart">
			
		SELECT
			goods_option_no goodsOptionNo
			, cart_quantity cartQuantity
		FROM shopping_cart
		WHERE customer_id = #{customerId}	
	
	</select>
	
	
	
	
	<!-- ================= 주문 폼 끝 ================= -->





	<!-- ================= 주문 시작 ================= -->

	<!-- goodsOptionNo로 company_id, goods_price 추출 -->
	<select id = "oSelectGoodsInfo"
			parameterType = "int"
			resultType = "java.util.HashMap">

		SELECT
			g.company_id companyId
			, g.goods_price goodsPrice
		FROM shopping_goods_option go
		INNER JOIN shopping_goods g
			ON go.goods_no = g.goods_no
		WHERE go.goods_option_no = #{goodsOptionNo }

	</select>
	
	<!-- orderTotal 생성 -->
	<insert id = "oInsertOrderTotal"
			parameterType = "java.util.HashMap">
	
		<selectKey resultType="int" 
			keyProperty="orderTotalNo" keyColumn="order_total_no" order="AFTER">
			<!-- LAST_INSERT_ID()  마지막 auto_increment값 반환하는 함수 -->
			SELECT LAST_INSERT_ID() 
		</selectKey>		
	
			INSERT INTO shopping_order_total (
				order_total_state
			) VALUES (
				'결제완료'
			)		
			
	</insert>
	
	<!-- 주문서 생성 -->
	<insert id = "oInsertOrderSheet"
			parameterType = "java.util.HashMap">
			
		<selectKey resultType="int" 
			keyProperty="orderSheetNo" keyColumn="order_sheet_no" order="AFTER">
			<!-- LAST_INSERT_ID()  마지막 auto_increment값 반환하는 함수 -->
			SELECT LAST_INSERT_ID() 
		</selectKey>			
			
			INSERT INTO shopping_order_sheet (
				company_id
				, order_total_no
				, customer_address_no
				, customer_id
				, order_sheet_state
				, order_sheet_waybill
				, order_sheet_price
			) VALUES (
				#{companyId}
				, #{orderTotalNo}
				, #{customerAddressNo}
				, #{customerId}
				, '결제완료'
				, '임시 운송장번호 12'
				, 0
			)	
			
	</insert>
	
	
	<!-- 주문 생성 -->
	<insert id = "oInsertGoodsOrder"
			parameterType = "java.util.HashMap">
	
		INSERT INTO shopping_goods_order (
			order_sheet_no
			, goods_option_no
			, goods_order_quantity
			, goods_order_price
			, goods_order_use_point
			, goods_order_state
		) VALUES (
			#{orderSheetNo}
			, #{goodsOptionNo}
			, #{goodsOrderQuantity}
			, #{goodsOrderPrice}
			, #{goodsOrderUsePoint}
			, '결제완료'
		)			
			
	</insert>
	
	<!-- 주문서 가격 수정 -->
	<insert id = "oUpdateOrderSheetPrice"
			parameterType = "int">
			
		UPDATE shopping_order_sheet
		SET
			order_sheet_price = (SELECT
									TRUNCATE(((SUM(go.goods_order_price) - SUM(go.goods_order_use_point)) * (100 - r.reward) / 100), 0) orderSheetPrice
								FROM shopping_goods_order go
								INNER JOIN shopping_order_sheet os
									ON go.order_sheet_no = os.order_sheet_no
								INNER JOIN customer c
									ON c.customer_id = os.customer_id
								INNER JOIN rank r
									ON c.customer_rank = r.customer_rank	
								WHERE go.order_sheet_no = #{orderSheetNo})	
		WHERE order_sheet_no = #{orderSheetNo}			
			
	</insert>	
	
	<!-- 주문한 수량 재고 차감 -->
	<update id = "oUpdateOrderQuantity"
			parameterType = "java.util.HashMap">
	
		UPDATE shopping_goods_option
		SET
			goods_option_quantity = (SELECT
										goods_option_quantity
									FROM shopping_goods_option
									WHERE goods_option_no = #{goodsOptionNo}) - #{goodsOrderQuantity}
		WHERE goods_option_no = #{goodsOptionNo}	
			
	</update>


	<!-- 장바구니의 companyId, optionNo, orderQuantity 리스트 추출 -->
	<select id = "oSelectCartInfoList"
			resultType = "java.util.HashMap">
	
		SELECT
			g.company_id companyId
			, go.goods_option_no goodsOptionNo
			, g.goods_price goodsPrice
			, c.cart_quantity goodsOrderQuantity
		FROM shopping_cart c
		INNER JOIN shopping_goods_option go
			ON c.goods_option_no = go.goods_option_no
		INNER JOIN shopping_goods g
			ON go.goods_no = g.goods_no	
			
	</select>

			
	<!-- 결제한 총 페이 -->
	<select id = "oSelectUsePay"
			parameterType = "int"
			resultType = "int">
			
		SELECT
			SUM(order_sheet_price)
		FROM shopping_order_sheet
		WHERE order_total_no = #{orderTotalNo}	
	
	</select>



	<!-- ================= 주문 끝 ================= -->









	<!-- ================= 주문 취소 시작 ================= -->

	<!-- cancel_history 주문 이력 추가 -->
	<insert id = "cInsertCancelHistory"
			parameterType = "java.util.HashMap">
			
		INSERT INTO shopping_cancel_history (
			goods_order_no
		) VALUES (
			#{goodsOrderNo}
		)	
		
	</insert>
	
	
	
	<!-- 취소할 주문의 option_no, option_quantity 가져오기 -->
	<select id = "cSelectCancelOptionNoQuantity"
			parameterType = "java.util.HashMap"
			resultType = "java.util.HashMap">
	
		SELECT
			goods_option_no goodsOptionNo
			, goods_order_quantity goodsOrderQuantity
		FROM shopping_goods_order
		WHERE goods_order_no = #{goodsOrderNo}		
	
	</select>
	
	
	<!-- 취소한 주문의 옵션 수량 만큼 goods_option 테이블 재고 복구 -->
	<update id = "cUpdateGoodsOptionQuantityRewind"
			parameterType = "java.util.HashMap">
			
		UPDATE shopping_goods_option
		SET goods_option_quantity = (SELECT
										goods_option_quantity + #{goodsOrderQuantity}
									FROM shopping_goods_option
									WHERE goods_option_no = #{goodsOptionNo})
			, updatedate = NOW()
		WHERE goods_option_no = #{goodsOptionNo}	
	
	</update>
	
	
	<!-- 주문 취소로 인해 복구한 재고 이력 남기기 -->
	<insert id = "cInsertStockHistory"
			parameterType = "java.util.HashMap">
			
		INSERT INTO shopping_stock_history (
			goods_option_no
			, stock_history_quantity
			, stock_history_state
			, stock_history_memo
		) VALUES (
			#{goodsOptionNo}
			, #{goodsOrderQuantity}
			, '입고'
			, '주문취소'
		)			
	
	</insert>
	
	
	

	<!-- 취소 전 결제 했었던 주문서 가격 -->
	<select id = "cSelectOrderSheetPrice"
			parameterType = "java.util.HashMap"
			resultType = "int">
	
		SELECT
			order_sheet_price
		FROM shopping_order_sheet
		WHERE order_sheet_no = #{orderSheetNo}	
			AND customer_id = #{customerId}				
	
	</select>

	<!-- 주문서 가격(결제 가격) pay_save 이력 추가 -->
 	<insert id = "cInsertPaySaveHistory"
 			parameterType = "java.util.HashMap">
 			
		INSERT INTO pay_save_history (
			pay_save_history_category
			, pay_save_history_content
			, customer_id
			, price
		) VALUES (
			'쇼핑환불'
			, #{orderSheetNo}
			, #{customerId}	
			, #{orderSheetPrice}
		)	
 	
 	</insert>

	<!-- 주문서 가격(결제 가격) total_use_pay 복구 -->
	<update id = "cUpdateTotalUsePayRewind"
			parameterType = "java.util.HashMap">
			
		UPDATE total_use_pay
		SET use_pay = (SELECT
							use_pay - #{orderSheetPrice}
						FROM total_use_pay
						WHERE customer_id = #{customerId})
		WHERE customer_id = #{customerId}
		
	</update>

	<!-- customer 테이블 pay 환급 -->
	<update id = "cUpdateCustomerPayRewind"
			parameterType = "java.util.HashMap">
	
		UPDATE customer
		SET customer_pay = (SELECT
								customer_pay + #{orderSheetPrice}
							FROM customer
							WHERE customer_id = #{customerId})
		WHERE customer_id = #{customerId}	
		
	</update>

	<!-- 주문에 사용한 총 포인트 -->
	<select id = "cSelectSumPointOrderCancel"
			parameterType = "java.util.HashMap"
			resultType = "int">
	
		SELECT
			SUM(ord.goods_order_use_point) point
		FROM shopping_goods_order ord
		INNER JOIN shopping_order_sheet s
			ON s.order_sheet_no = ord.order_sheet_no
		WHERE s.order_sheet_no = #{orderSheetNo}
			AND s.customer_id = #{customerId}
			AND ord.goods_order_state = '결제완료'

	</select>

	<!-- 사용 총 포인트가 0보다 크다면 point_save 이력 추가 -->
	<insert id = "cInsertPointSaveHistory"
			parameterType = "java.util.HashMap">
			
		INSERT INTO point_save_history (
			point_save_history_category
			, point_save_history_content
			, customer_id
			, point
		) VALUES (
			'쇼핑환불'
			, #{orderSheetNo}
			, #{customerId}
			, #{point}
		)

	</insert>

	<!-- 사용 총 포인트가 0보다 크다면 customer 테이블 point 환급 -->
	<update id = "cUpdateCustomerPointRewind"
			parameterType = "java.util.HashMap">
	
		UPDATE customer
		SET customer_point = (SELECT
									customer_point + #{point}
								FROM customer
								WHERE customer_id = #{customerId})
		WHERE customer_id = #{customerId}
		
	</update>

	<!-- 결제 완료 된 주문 count -->
	<select id = "cSelectCountOrderPayment"
			parameterType = "java.util.HashMap"
			resultType = "int">
			
		SELECT
			COUNT(ord.goods_order_no) count
		FROM shopping_goods_order ord
		INNER JOIN shopping_order_sheet s
			ON ord.order_sheet_no = s.order_sheet_no
		WHERE s.order_sheet_no = #{orderSheetNo}
			AND s.customer_id = #{customerId}
			AND ord.goods_order_state = '결제완료'		
			
	</select>


	<!-- 해당 주문 주문상태 취소로 변경 -->
	<update id = "cUpdateOrderStateCancel"
			parameterType = "java.util.HashMap">
			
		UPDATE shopping_goods_order
		SET goods_order_state = '취소'
		WHERE goods_order_no = #{goodsOrderNo}

	</update>

	<!-- 주문 중 결제완료인 goods_option_no, quantity, price 저장 -->
	<select id = "cSelectOptionNoQuantityPrice"
			parameterType = "java.util.HashMap"
			resultType = "java.util.HashMap">
			
		SELECT
			ord.goods_option_no goodsOptionNo
			, ord.goods_order_quantity goodsOrderQuantity
			, ord.goods_order_price goodsOrderPrice
		FROM shopping_goods_order ord
		INNER JOIN shopping_order_sheet s
			ON ord.order_sheet_no = s.order_sheet_no
		WHERE s.order_sheet_no = #{orderSheetNo}
			AND s.customer_id = #{customerId}
			AND ord.goods_order_state = '결제완료'

	</select>

	<!-- 주문서 company_id, customer_address_no 저장 -->
	<select id = "cSelectCompanyIdCustomerAddress"
			parameterType = "java.util.HashMap"
			resultType = "java.util.HashMap">
			
		SELECT
			company_id companyId
			, customer_address_no customerAddressNo
		FROM shopping_order_sheet
		WHERE order_sheet_no = #{orderSheetNo}
			AND customer_id = #{customerId}

	</select>

	<!-- 주문서 주문상태 취소로 변경 -->
	<update id = "cUpdateOrderSheetStateCancel"
			parameterType = "java.util.HashMap">
			
		UPDATE shopping_order_sheet
		SET order_sheet_state = '취소'
		WHERE order_sheet_no = #{orderSheetNo}
			AND customer_id = #{customerId}
	
	</update>

	<!-- 나머지 모든 주문들 주문상태 취소로 변경 -->
	<update id = "cUpdateGoodsOrderStateCancel"
			parameterType = "java.util.HashMap">
	
		UPDATE shopping_goods_order
		SET goods_order_state = '취소'
		WHERE order_sheet_no = #{orderSheetNo}
	
	</update>











	<!-- 새로운 주문서 생성 후 no 추출 -->
	
	<insert id="cInsertNewOrderSheet"
			parameterType="java.util.HashMap">
			
		<!-- mariadb에서는 insert전/후 auto_increment값을 입력된 매개변수로 참조 가능 -->
		<selectKey resultType="int" 
			keyProperty="newOrderSheetNo" keyColumn="order_sheet_no" order="AFTER">
			<!-- LAST_INSERT_ID()  마지막 auto_increment값 반환하는 함수 -->
			SELECT LAST_INSERT_ID() 
		</selectKey>
		
			INSERT INTO shopping_order_sheet (
				company_id
				, customer_address_no
				, customer_id
				, order_sheet_state
				, order_sheet_waybill
				, order_sheet_price
			) VALUES (
				#{companyId}
				, #{customerAddressNo}
				, #{customerId}
				, '결제완료'
				, '임시 운송장번호'
				, 0			
			)
	</insert>

	<!-- 취소한 주문 제외하고 나머지 주문들 재구매(서비스에서 반복문 돌림) -->
	<insert id = "cInsertNewGoodsOrder"
			parameterType="java.util.HashMap">
			
		INSERT INTO shopping_goods_order (
			order_sheet_no
			, goods_option_no
			, goods_order_quantity
			, goods_order_price
			, goods_order_use_point
			, goods_order_state
		) VALUES (
			#{newOrderSheetNo}
			, #{goodsOptionNo}
			, #{goodsOrderQuantity}
			, #{goodsOrderPrice}
			, 0
			, '결제완료'
		)
	
	</insert>

	<!-- 새로운 주문서 총 가격(등급 할인만 적용) -->
	<select id = "cSelectNewOrderSheetPrice"
			parameterType="java.util.HashMap"
			resultType = "int">
	
		SELECT
			SUM(ord.goods_order_price) * ((100 - r.reward) / 100)
		FROM shopping_goods_order ord
		INNER JOIN shopping_order_sheet s
			ON ord.order_sheet_no = s.order_sheet_no
		INNER JOIN customer c
			ON c.customer_id = s.customer_id
		INNER JOIN rank r
			ON c.customer_rank = r.customer_rank
		WHERE s.order_sheet_no = #{newOrderSheetNo}
			AND s.customer_id = #{customerId}
			AND ORD.goods_order_state = '결제완료'
	
	</select>

	<!-- 새로운 주문서 가격 수정 -->
	<update id = "cUpdateNewOrderSheetPrice"
			parameterType="java.util.HashMap">
			
		UPDATE shopping_order_sheet
		SET order_sheet_price = #{newOrderSheetPrice}
		WHERE order_sheet_no = #{newOrderSheetNo}
			AND customer_id = #{customerId}
	
	</update>

	<!-- pay_use_history 이력 추가 -->
	<insert id = "cInsertPayUseHistory"
			parameterType="java.util.HashMap">
	
		INSERT INTO pay_use_history (
			pay_use_history_category
			, pay_use_history_content
			, customer_id
			, price
		) VALUES (
			'쇼핑구매'
			, #{newOrderSheetNo}
			, #{customerId}
			, #{newOrderSheetPrice}
		)

	</insert>

	<!-- customer 테이블 새 주문서 가격으로 pay 차감 -->
	<update id = "cUpdateCustomerPayBuy"
			parameterType = "java.util.HashMap">
	
		UPDATE customer
		SET customer_pay = (SELECT
								customer_pay - #{newOrderSheetPrice}
							FROM customer
							WHERE customer_id = #{customerId})
		WHERE customer_id = #{customerId}	
		
	</update>

	<!-- total_use_pay 재구매 내용 적용 -->
	<update id = "cUpdateTotalUsePayBuy"
			parameterType = "java.util.HashMap">
			
		UPDATE total_use_pay
		SET use_pay = (SELECT
								use_pay + #{newOrderSheetPrice}
							FROM total_use_pay
							WHERE customer_id = #{customerId})
		WHERE customer_id = #{customerId}
	
	</update>













	


</mapper>